{"version":3,"sources":["components/Description/Description.js","components/Map/Map.js","components/Table/Table.js","util.js","components/AreaChart/AreaChart.js","components/StackedChart/StackedChart.js","components/LineChart/LineChart.js","components/container/container.js","index.js"],"names":["Component","Map","props","markers","data","this","processData","map","L","center","zoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","layers","tileLayer","confirmed_overlay","LayerGroup","addTo","recovered_overlay","deaths_overlay","hospitalised_overlay","forEach","e","latlng","datakey","confirmed","circle","color","fillColor","fillOpacity","weight","radius","bindTooltip","province","country","recovered","deaths","hospitalised","control","collapsed","s","pan","adding","selection","setView","location","reduce","acc","latLng","lat","long","id","SortableTable","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","searchInput","placeholder","value","onChange","target","onPressEnter","handleSearch","width","marginBottom","display","type","onClick","icon","SearchOutlined","size","marginRight","handleReset","filterIcon","filtered","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","state","searchedColumn","highlightStyle","backgroundColor","searchWords","searchText","autoEscape","textToHighlight","setState","handleChange","pagination","filters","sorter","sortedInfo","handleClick","timer","clearTimeout","str","i","Number","handleSelection","key","String","columns","title","a","b","sortOrder","columnKey","order","ellipsis","hispital","rowSelection","className","dataSource","createSVG","height","viewbox","d3","append","attr","AreaChart","margin","top","right","bottom","left","svg","util","curve","y","domain","total","d","nice","range","x","date","area","y0","y1","datum","call","g","ticks","tickFormat","tickSizeOuter","selectAll","remove","clone","length","j","selected","selectedData","Array","isArray","indexOf","JSON","parse","stringify","transition","duration","end","update","StackedChart","yAxis","series","keys","Object","slice","join","Math","min","push","active","Header","Layout","Content","Sider","Container","max","mapping","dates","then","res","covid_19_data","ObservationDate","Confirmed","Deaths","Recovered","latestStats","filter","simpleStats","time_series_covid_19_confirmed","time_series_covid_19_recovered","time_series_covid_19_deaths","Lat","Long","overflow","position","replace","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.14f9d709.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Description.css';\n\nclass Description extends Component {\n    render() {\n        return (\n            <div className=\"content-box\">\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default Description;","import React, { Component } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'\nimport './Map.css';\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.markers = [];\n    }\n\n    componentDidMount() {\n        const { data } = this.props;\n        this.processData();\n\n        this.map = L.map('map', {\n            center: [33, 12],\n            zoom: 2,\n            attributionControl: false,\n            zoomControl: true,\n            doubleClickZoom: true,\n            scrollWheelZoom: false,\n            dragging: true,\n            layers: [\n                L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png'),\n            ]\n        });\n\n        let confirmed_overlay = new L.LayerGroup().addTo(this.map);\n        let recovered_overlay = new L.LayerGroup();\n        let deaths_overlay = new L.LayerGroup();\n        let hospitalised_overlay = new L.LayerGroup();\n\n        data.forEach((e) => {\n            if (this.latlng[e.datakey] && e.confirmed !== 0) {\n                L.circle(this.latlng[e.datakey], {\n                    color: 'red',\n                    fillColor: '#f03',\n                    fillOpacity: 0.5,\n                    weight: 2,\n                    radius: e.confirmed < 1500 ? e.confirmed * 200 : 2000 * 200 + (e.confirmed - 5000) * 20\n                })\n                    .bindTooltip(\n                        e.province && e.province !== e.country ?\n                            e.province + ', ' + e.country + ': ' + e.confirmed :\n                            e.country + ': ' + e.confirmed\n                    )\n                    .addTo(confirmed_overlay);\n            }\n\n            if (this.latlng[e.datakey] && e.recovered !== 0) {\n                L.circle(this.latlng[e.datakey], {\n                    color: '#099c44',\n                    fillColor: '#099c44',\n                    fillOpacity: 0.5,\n                    weight: 2,\n                    radius: e.recovered < 1500 ? e.recovered * 200 : 2000 * 200 + (e.recovered - 5000) * 20\n                })\n                    .bindTooltip(\n                        e.province && e.province !== e.country ?\n                            e.province + ', ' + e.country + ': ' + e.recovered :\n                            e.country + ': ' + e.recovered\n                    )\n                    .addTo(recovered_overlay);\n            }\n\n            if (this.latlng[e.datakey] && e.deaths !== 0) {\n                L.circle(this.latlng[e.datakey], {\n                    color: '#404040',\n                    fillColor: '#404040',\n                    fillOpacity: 0.5,\n                    weight: 2,\n                    radius: e.deaths < 1500 ? e.deaths * 200 : 2000 * 200 + (e.deaths - 5000) * 20\n                })\n                    .bindTooltip(\n                        e.province && e.province !== e.country ?\n                            e.province + ', ' + e.country + ': ' + e.deaths :\n                            e.country + ': ' + e.deaths\n                    )\n                    .addTo(deaths_overlay);\n            }\n\n            if (this.latlng[e.datakey] && e.hospitalised !== 0) {\n                L.circle(this.latlng[e.datakey], {\n                    color: '#EFCC00',\n                    fillColor: '#EFCC00',\n                    fillOpacity: 0.5,\n                    weight: 2,\n                    radius: e.hospitalised < 1500 ? e.hospitalised * 200 : 2000 * 200 + (e.hospitalised - 5000) * 20\n                })\n                    .bindTooltip(\n                        e.province && e.province !== e.country ?\n                            e.province + ', ' + e.country + ': ' + e.hospitalised :\n                            e.country + ': ' + e.hospitalised\n                    )\n                    .addTo(hospitalised_overlay);\n            }\n        });\n        L.control.layers({\n            \"Confirmed\": confirmed_overlay,\n            \"Deaths\": deaths_overlay,\n            \"Recovered\": recovered_overlay,\n            \"Active\": hospitalised_overlay,\n        }, null, { collapsed: false }).addTo(this.map);\n\n    }\n\n    componentWillReceiveProps(s) {\n        if (s.pan.adding) {\n            //console.log(s.pan.selection)\n            if (this.latlng[s.pan.selection]) this.map.setView(this.latlng[s.pan.selection], 4);\n        }\n    }\n    processData() {\n        const { location } = this.props;\n        this.latlng = location.reduce((acc, e) => {\n            acc[e.province + ', ' + e.country] = L.latLng(e.lat, e.long);\n            return acc;\n        }, {});\n    }\n\n    render() {\n        return (\n            <div id='map'>\n\n            </div>\n        )\n    }\n}\n\nexport default Map;\n","import React, { Component } from 'react';\nimport { Table, Input, Button } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined } from '@ant-design/icons';\nimport 'antd/dist/antd.css';\nimport './Table.css';\n\nclass SortableTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchText: '',\n            searchedColumn: '',\n            sortedInfo: null,\n        };\n        this.data = this.props.data.map((e, i) => {\n            return {\n                key: String(i),\n                ...e\n            };\n        });\n    }\n\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n                    icon={<SearchOutlined />}\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n            </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n            </Button>\n            </div>\n        ),\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text =>\n            this.state.searchedColumn === dataIndex ? (\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={[this.state.searchText]}\n                    autoEscape\n                    textToHighlight={text.toString()}\n                />\n            ) : (\n                    text\n                ),\n    });\n\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm();\n        this.setState({\n            searchText: selectedKeys[0],\n            searchedColumn: dataIndex,\n        });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n\n    handleChange = (pagination, filters, sorter) => {\n        //console.log('Various parameters', pagination, filters, sorter);\n        this.setState({\n            sortedInfo: sorter,\n        });\n    };\n\n    handleClick = (s) => {\n        if(this.timer) clearTimeout(this.timer);\n        this.timer = setTimeout(()=>{\n            const str = s.map((i) => {\n                const e = this.data[Number(i)];\n                return e.datakey;\n            });\n            this.props.handleSelection(s, str);\n        }, 500);\n    }\n\n    render() {\n        let { sortedInfo } = this.state;\n        sortedInfo = sortedInfo || {};\n        const columns = [{\n            title: 'State',\n            dataIndex: 'province',\n            key: 'province',\n            ...this.getColumnSearchProps('province'),\n        }, {\n            title: 'Country',\n            dataIndex: 'country',\n            key: 'country',\n            ...this.getColumnSearchProps('country'),\n        }, {\n            title: 'Confirmed',\n            dataIndex: 'confirmed',\n            key: 'confirmed',\n            sorter: (a, b) => Number(a.confirmed) - Number(b.confirmed),\n            sortOrder: sortedInfo.columnKey === 'confirmed' && sortedInfo.order,\n            ellipsis: true\n        }, {\n            title: 'Deaths',\n            dataIndex: 'deaths',\n            key: 'deaths',\n            sorter: (a, b) => Number(a.deaths) - Number(b.deaths),\n            sortOrder: sortedInfo.columnKey === 'deaths' && sortedInfo.order,\n            ellipsis: true,\n        }, {\n            title: 'Recovered',\n            dataIndex: 'recovered',\n            key: 'recovered',\n            sorter: (a, b) => Number(a.recovered) - Number(b.recovered),\n            sortOrder: sortedInfo.columnKey === 'recovered' && sortedInfo.order,\n            ellipsis: true,\n        }, {\n            title: 'Active',\n            dataIndex: 'hospitalised',\n            key: 'hospitalised',\n            sorter: (a, b) => Number(a.hispital) - Number(b.hispital),\n            sortOrder: sortedInfo.columnKey === 'hospitalised' && sortedInfo.order,\n            ellipsis: true,\n        }];\n\n        const rowSelection = {\n          onChange: this.handleClick,\n        };\n\n        return (\n            <div className=\"table-container\">\n                <Table columns={columns} dataSource={this.data} onChange={this.handleChange} rowSelection={rowSelection} />\n            </div>\n        )\n    }\n}\n\nexport default SortableTable;","import * as d3 from 'd3';\n\nexport const createSVG = (id, width, height, viewbox) => {\n    return d3.select(\"#\" + id)\n        .append(\"svg\")\n        .attr(\"viewBox\", viewbox)\n        .style(\"width\", width)\n        .style(\"height\", height);\n}\n\nexport const createChord = (padAngle) => {\n    return d3.chord()\n        .padAngle(padAngle)\n        .sortSubgroups(d3.descending)\n        .sortChords(d3.descending)\n        .style(\"overflow\", \"visible\")\n}\n\nexport const createArc = (innerRadius, outerRadius) => {\n    return d3.arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n}\n\nexport const createRibbon = (innerRadius) => {\n    return d3.ribbon()\n        .radius(innerRadius)\n}\n","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as util from '../../util';\nimport './AreaChart.css';\n\nclass AreaChart extends Component {\n    constructor(props) {\n        super(props);\n        this.margin = ({ top: 20, right: 20, bottom: 30, left: 50 })\n    }\n\n    componentDidMount() {\n        const { id, width, height } = this.props;\n        this.processData();\n        this.svg = util.createSVG(id, width, height, [0, 0, width, height]);\n        const curve = d3.curveLinear\n        const yAxis = g => g\n            .attr(\"transform\", `translate(${this.margin.left},0)`)\n            .call(d3.axisLeft(y))\n            .call(g => g.select(\".domain\").remove())\n            .call(g => g.select(\".tick:last-of-type text\").clone()\n                .attr(\"x\", 3)\n                .attr(\"y\", 5)\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(this.props.y))\n        const xAxis = g => g\n            .attr(\"transform\", `translate(0,${height - this.margin.bottom})`)\n            .call(d3.axisBottom(x).ticks(width / 70).tickFormat(d3.timeFormat('%m/%d')).tickSizeOuter(0))\n\n        const y = d3.scaleLinear()\n            .domain([0, d3.max(this.total, d => d.value)]).nice()\n            .range([height - this.margin.bottom, this.margin.top])\n\n        const x = d3.scaleTime()\n            .domain(d3.extent(this.total, d => d.date))\n            .range([this.margin.left, width - this.margin.right])\n\n        this.area = d3.area()\n            .curve(curve)\n            .x(d => x(d.date))\n            .y0(y(0))\n            .y1(d => y(d.value))\n\n\n        this.svg.append(\"path\")\n            .datum(this.total)\n            .attr(\"fill\", \"steelblue\")\n            .attr(\"d\", this.area)\n\n        this.svg.append(\"path\")\n            .attr(\"class\", \"selected\")\n            .attr(\"fill\", this.props.color)\n            .attr(\"class\", \"selected\")\n\n        this.svg.append(\"g\")\n            .call(xAxis)\n            .selectAll('text')\n            .attr(\"y\", 0)\n            .attr(\"x\", 15)\n            .attr(\"dy\", \"1.5em\")\n            .attr(\"transform\", \"rotate(30)\")\n\n        this.svg.append(\"g\")\n            .call(yAxis);\n\n    }\n\n    processData() {\n        const { data } = this.props;\n        this.total = data[0].data;\n        for (let i = 1; i < data.length; i++) {\n            data[i].data.forEach((e, j) => {\n                this.total[j].value += e.value;\n            });\n        }\n        this.total.forEach((d) => {if(typeof d.date === 'string') d.date = d3.timeParse(\"%m/%d/%Y\")(d.date + '20')});\n        //this.total.pop();\n    }\n\n    update() {\n        const { selected, data } = this.props;\n\n        this.selectedData = null;\n\n        if (selected && selected.length > 0) {\n            for (let i = 0; i < data.length; i++) {\n                if (Array.isArray(selected) && selected.indexOf(data[i].province + ', ' + data[i].country) >= 0) {\n                    if (Array.isArray(this.selectedData)) {\n                        data[i].data.forEach((e, j) => {\n                            this.selectedData[j].value += e.value;\n                        });\n                    } else {\n                        this.selectedData = JSON.parse(JSON.stringify(data[i].data));\n                    }\n                }\n            }\n        }\n        \n        if (!this.selectedData || this.selectedData.length === 0) this.selectedData = data[0].data.map((e) => {\n            return {\n                date: e.date,\n                value: 0\n            }\n        });\n        if (Array.isArray(this.selectedData)) {\n            this.selectedData.forEach((d) => { if (typeof d.date === 'string') d.date = d3.timeParse(\"%m/%d/%Y\")(d.date + '20') });\n            //this.selectedData.pop();\n            if (this.svg)\n                this.svg.select(\".selected\")\n                    .datum(this.selectedData)\n                    .transition()\n                    .duration(2000)\n                    .attr(\"d\", this.area)\n                    .end();\n        }\n    }\n\n    render() {\n        return (\n            <div id={this.props.id}>\n                {this.update()}\n            </div>\n        )\n    }\n}\nexport default AreaChart;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as util from '../../util';\nimport './StackedChart.css';\n\nclass StackedChart extends Component {\n    constructor(props) {\n        super(props);\n        this.margin = ({ top: 20, right: 20, bottom: 30, left: 50 })\n    }\n\n    componentDidMount() {\n        const { id, width, height, confirmed, recovered, deaths } = this.props;\n        this.processData();\n        this.svg = util.createSVG(id, width, height, [0, 0, width, height]);\n\n        this.yAxis = g => g\n            .attr(\"transform\", `translate(${this.margin.left},0)`)\n            .call(d3.axisLeft(this.y))\n            .call(g => g.select(\".domain\").remove())\n            .call(g => g.select(\".tick:last-of-type text\")\n                .attr(\"x\", 3)\n                .attr(\"y\", 5)\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(this.props.y))\n        const xAxis = g => g\n            .attr(\"transform\", `translate(0,${height - this.margin.bottom})`)\n            .call(d3.axisBottom(this.x).ticks(8).tickFormat(d3.timeFormat('%m/%d')).tickSizeOuter(0))\n\n        this.series = d3.stack().keys(Object.keys(this.total[0]).slice(1))(this.total)\n        this.y = d3.scaleLinear()\n            .domain([0, d3.max(this.series, d => d3.max(d, d => d[1]))]).nice()\n            .range([height - this.margin.bottom, this.margin.top])\n\n        this.x = d3.scaleTime()\n            .domain(d3.extent(this.total, d => d.date))\n            .range([this.margin.left, width - this.margin.right])\n\n        this.area = d3.area()\n            .curve(d3.curveLinear)\n            .x(d => this.x(d.data.date))\n            .y0(d => this.y(d[0]))\n            .y1(d => this.y(d[1]))\n\n\n        const color = d3.scaleOrdinal()\n            .domain(Object.keys(this.total[0]).slice(1))\n            .range(d3.schemeCategory10)\n\n        this.svg.append(\"g\")\n            .selectAll(\"path\")\n            .data(this.series)\n            .join(\"path\")\n            .attr(\"fill\", ({ key }) => color(key))\n            .attr(\"d\", this.area)\n            .append(\"title\")\n            .text(({ key }) => key);\n\n        this.svg.append(\"g\")\n            .call(xAxis)\n            .selectAll('text')\n            .attr(\"y\", 0)\n            .attr(\"x\", 0)\n            .attr(\"dy\", \"1.8em\")\n\n        this.svg.append(\"g\")\n            .attr(\"id\", \"y-axis\")\n            .call(this.yAxis);\n\n    }\n\n    processData() {\n        const { confirmed, recovered, deaths } = this.props;\n        this.total = [];\n        //console.log(recovered)\n        for (let i = 1; i < confirmed.length; i++) {\n            for (let j = 0; j < Math.min(confirmed[i].data.length, recovered[i].data.length, deaths[i].data.length); j++) {\n                if (this.total[j] === undefined) this.total.push({});\n                if (this.total[j].date === undefined) this.total[j].date = confirmed[i].data[j].date;\n                if (this.total[j].active === undefined) this.total[j].active = 0;\n                if (this.total[j].recovered === undefined) this.total[j].recovered = 0;\n                if (this.total[j].deaths === undefined) this.total[j].deaths = 0;\n\n                this.total[j].active += confirmed[i].data[j].value - recovered[i].data[j].value - deaths[i].data[j].value;\n                this.total[j].recovered += recovered[i].data[j].value;\n                this.total[j].deaths += deaths[i].data[j].value;\n                //console.log(recovered[0].data[0].value)\n            }\n        }\n        this.total.forEach((d) => { if (typeof d.date === 'string') d.date = d3.timeParse(\"%m/%d/%Y\")(d.date + '20') });\n        //this.total.pop();\n    }\n\n    componentDidUpdate() {\n        const { selected, confirmed, recovered, deaths, height } = this.props;\n\n        this.selectedData = [];\n        if (selected != null && selected.length > 0) {\n            for (let i = 0; i < confirmed.length; i++) {\n                if (Array.isArray(selected) && selected.indexOf(confirmed[i].province + ', ' + confirmed[i].country) >= 0) {\n                    for (let j = 0; j < Math.min(confirmed[i].data.length, recovered[i].data.length, deaths[i].data.length); j++) {\n                        if (this.selectedData[j] === undefined) this.selectedData.push({});\n                        if (this.selectedData[j].date === undefined) this.selectedData[j].date = confirmed[i].data[j].date;\n                        if (this.selectedData[j].active === undefined) this.selectedData[j].active = 0;\n                        if (this.selectedData[j].recovered === undefined) this.selectedData[j].recovered = 0;\n                        if (this.selectedData[j].deaths === undefined) this.selectedData[j].deaths = 0;\n        \n                        this.selectedData[j].active += confirmed[i].data[j].value - recovered[i].data[j].value - deaths[i].data[j].value;\n                        this.selectedData[j].recovered += recovered[i].data[j].value;\n                        this.selectedData[j].deaths += deaths[i].data[j].value;\n                    }\n                }\n            }\n        }\n        if (!this.selectedData || this.selectedData.length === 0) {\n            this.series = d3.stack().keys(Object.keys(this.total[0]).slice(1))(this.total)\n            this.y = d3.scaleLinear()\n                .domain([0, d3.max(this.series, d => d3.max(d, d => d[1]))]).nice()\n                .range([height - this.margin.bottom, this.margin.top])\n\n                this.area = d3.area()\n                    .curve(d3.curveLinear)\n                    .x(d => this.x(d.data.date))\n                    .y0(d => this.y(d[0]))\n                    .y1(d => this.y(d[1]))\n\n                this.svg.select(\"#y-axis\")\n                    .transition()\n                    .duration(2000)\n                    .call(this.yAxis);\n\n                this.svg.selectAll(\"path\")\n                    .data(this.series)\n                    .transition()\n                    .duration(2000)\n                    .attr(\"d\", this.area)\n                    .end();\n        } else {\n            this.selectedData.forEach((d) => { if (typeof d.date === 'string') d.date = d3.timeParse(\"%m/%d/%Y\")(d.date + '20') });\n            //this.selectedData.pop();\n\n            if (this.svg) {\n                this.series = d3.stack().keys(Object.keys(this.selectedData[0]).slice(1))(this.selectedData)\n                this.y = d3.scaleLinear()\n                    .domain([0, d3.max(this.series, d => d3.max(d, d => d[1]))]).nice()\n                    .range([height - this.margin.bottom, this.margin.top])\n\n                this.area = d3.area()\n                    .curve(d3.curveLinear)\n                    .x(d => this.x(d.data.date))\n                    .y0(d => this.y(d[0]))\n                    .y1(d => this.y(d[1]))\n\n                this.svg.select(\"#y-axis\")\n                    .transition()\n                    .duration(2000)\n                    .call(this.yAxis);\n\n                this.svg.selectAll(\"path\")\n                    .data(this.series)\n                    .transition()\n                    .duration(2000)\n                    .attr(\"d\", this.area)\n                    .end();\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div id={this.props.id}>\n            </div>\n        )\n    }\n}\nexport default StackedChart;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as util from '../../util';\nimport './LineChart.css';\n\nclass LineChart extends Component {\n    constructor(props) {\n        super(props);\n        this.margin = ({ top: 20, right: 20, bottom: 30, left: 50 })\n        this.data = {};\n    }\n\n    componentDidMount() {\n        const { id, width, height } = this.props;\n        this.processData();\n        this.svg = util.createSVG(id, width, height, [0, 0, width, height]);\n\n        this.yAxis = g => g\n            .attr(\"transform\", `translate(${this.margin.left},0)`)\n            .call(d3.axisLeft(this.y))\n            .call(g => g.select(\".domain\").remove())\n            .call(g => g.select(\".tick:last-of-type text\")\n                .attr(\"x\", 3)\n                .attr(\"y\", 5)\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(this.props.y))\n        const xAxis = g => g\n            .attr(\"transform\", `translate(0,${height - this.margin.bottom})`)\n            .call(d3.axisBottom(this.x).ticks(width / 80).tickSizeOuter(0))\n\n        this.series = d3.stack().keys(Object.keys(this.data.total[0]).slice(1))(this.data.total)\n        this.y = d3.scaleLinear()\n            .domain([0, d3.max(this.data.total, d => d3.max(d.values))]).nice()\n            .range([height - this.margin.bottom, this.margin.top])\n\n        this.x = d3.scaleTime()\n            .domain(d3.extent(this.data.dates))\n            .range([this.margin.left, width - this.margin.right])\n\n        this.line = d3.line()\n            .defined(d => !isNaN(d))\n            .x((d, i) => this.x(this.data.dates[i]))\n            .y(d => {this.y(d); console.log(d)})\n\n        const color = d3.scaleOrdinal()\n            .domain(Object.keys(this.data.total.length))\n            .range(d3.schemeCategory10)\n\n        this.svg.append(\"g\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"steelblue\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-linecap\", \"round\")\n            .selectAll(\"path\")\n            .data(this.data.total)\n            .join(\"path\")\n            .style(\"mix-blend-mode\", \"multiply\")\n            .attr(\"d\", d => this.line(d.values));\n\n            \n        this.svg.append(\"g\")\n            .call(xAxis)\n            .selectAll('text')\n            .attr(\"y\", 0)\n            .attr(\"x\", 9)\n            .attr(\"dy\", \"1.35em\")\n            .attr(\"transform\", \"rotate(30)\")\n\n        this.svg.append(\"g\")\n            .attr(\"id\", \"y-axis\")\n            .call(this.yAxis);\n\n    }\n\n    processData() {\n        const { data, dates } = this.props;\n        this.data.total = [];\n        for (let i = 1; i < data.length; i++) {\n            let temp = {\n                name: data[i].province ?\n                    data[i].province + \", \" + data[i].country : data[i].country,\n                values: []\n            };\n\n            data[i].data.forEach((e, j) => {\n                temp.values.push(j > 1 ? Number(e.value) - Number(data[i].data[j - 1].value) : e.value)\n            })\n            this.data.total.push(temp);\n        }\n        this.data.dates = dates.map((d) => { return d3.timeParse(\"%m/%d/%Y\")(d + '20') });\n        console.log(d3.timeParse(\"%m/%d/%Y\")('1/22/2020'))\n        //this.data.total.pop();\n        console.log(this.data.total)\n    }\n\n    componentDidUpdate() {\n        const { selected, confirmed, recovered, deaths, height } = this.props;\n\n        this.selectedData = [];\n        if (selected != null && selected.length > 0) {\n            for (let i = 0; i < confirmed.length; i++) {\n                if (Array.isArray(selected) && selected.indexOf(confirmed[i].province + ', ' + confirmed[i].country) >= 0) {\n                    for (let j = 0; j < Math.min(confirmed[i].data.length, recovered[i].data.length, deaths[i].data.length); j++) {\n                        if (this.selectedData[j] === undefined) this.selectedData.push({});\n                        if (this.selectedData[j].date === undefined) this.selectedData[j].date = confirmed[i].data[j].date;\n                        if (this.selectedData[j].active === undefined) this.selectedData[j].active = 0;\n                        if (this.selectedData[j].recovered === undefined) this.selectedData[j].recovered = 0;\n                        if (this.selectedData[j].deaths === undefined) this.selectedData[j].deaths = 0;\n\n                        this.selectedData[j].active += confirmed[i].data[j].value - recovered[i].data[j].value - deaths[i].data[j].value;\n                        this.selectedData[j].recovered += recovered[i].data[j].value;\n                        this.selectedData[j].deaths += deaths[i].data[j].value;\n                    }\n                }\n            }\n        }\n        if (!this.selectedData || this.selectedData.length === 0) {\n            this.series = d3.stack().keys(Object.keys(this.data.total[0]).slice(1))(this.data.total)\n            this.y = d3.scaleLinear()\n                .domain([0, d3.max(this.series, d => d3.max(d, d => d[1]))]).nice()\n                .range([height - this.margin.bottom, this.margin.top])\n\n            this.area = d3.area()\n                .curve(d3.curveLinear)\n                .x(d => this.x(d.data.date))\n                .y0(d => this.y(d[0]))\n                .y1(d => this.y(d[1]))\n\n            this.svg.select(\"#y-axis\")\n                .transition()\n                .duration(2000)\n                .call(this.yAxis);\n\n            this.svg.selectAll(\"path\")\n                .data(this.series)\n                .transition()\n                .duration(2000)\n                .attr(\"d\", this.area)\n                .end();\n        } else {\n            this.selectedData.forEach((d) => { if (typeof d.date === 'string') d.date = d3.timeParse(\"%m/%d/%Y\")(d.date + '20') });\n            //this.selectedData.pop();\n\n            if (this.svg) {\n                this.series = d3.stack().keys(Object.keys(this.selectedData[0]).slice(1))(this.selectedData)\n                this.y = d3.scaleLinear()\n                    .domain([0, d3.max(this.series, d => d3.max(d, d => d[1]))]).nice()\n                    .range([height - this.margin.bottom, this.margin.top])\n\n                this.area = d3.area()\n                    .curve(d3.curveLinear)\n                    .x(d => this.x(d.data.date))\n                    .y0(d => this.y(d[0]))\n                    .y1(d => this.y(d[1]))\n\n                this.svg.select(\"#y-axis\")\n                    .transition()\n                    .duration(2000)\n                    .call(this.yAxis);\n\n                this.svg.selectAll(\"path\")\n                    .data(this.series)\n                    .transition()\n                    .duration(2000)\n                    .attr(\"d\", this.area)\n                    .end();\n            }\n        }\n    }\n\n\n    render() {\n        return (\n            <div id={this.props.id}>\n            </div>\n        )\n    }\n}\nexport default LineChart;","import React, { Component } from 'react';\nimport Description from '../Description/Description';\nimport Map from '../Map/Map';\nimport Table from '../Table/Table';\nimport AreaChart from '../AreaChart/AreaChart';\nimport StackedChart from '../StackedChart/StackedChart';\nimport LineChart from '../LineChart/LineChart';\nimport * as d3 from 'd3';\nimport { Layout } from 'antd';\nimport './container.css';\n\nconst { Header, Content, Sider } = Layout;\nclass Container extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: [],\n            \"covid_19_data\": false,\n            \"time_series_covid_19_confirmed\": false,\n        }\n        this.pan = {};\n        this.mapping = {\n            [\"\" + \", South Korea\"]: \"\" + \", Republic of Korea\",\n            [\"UK\" + \", UK\"]: \"\" + \", UK\",\n            [\"Hong Kong\" + \", Mainland China\"]: \"Hong Kong\" + \", Hong Kong SAR\",\n            [\"\" + \", Taiwan\"]: \"Taiwan\" + \", Taipei and environs\",\n            [\"Diamond Princess cruise ship\" + \", US\"]: \"Diamond Princess cruise ship\" + \", Others\",\n            [\"Macau\" + \", Mainland China\"]: \"Macau\" + \", Macao SAR\",\n            [\"Channel Islands\" + \", UK\"]: \"\" + \", Channel Islands\",\n            [\"Gibraltar\" + \", UK\"]: \"\" + \", Gibraltar\"\n        }\n        this.dates = ['1/22/20', '1/23/20', '1/24/20', '1/25/20', '1/26/20', '1/27/20', '1/28/20', '1/29/20', '1/30/20', '1/31/20', '2/1/20', '2/2/20', '2/3/20', '2/4/20', '2/5/20', '2/6/20', '2/7/20', '2/8/20', '2/9/20', '2/10/20', '2/11/20', '2/12/20', '2/13/20', '2/14/20', '2/15/20', '2/16/20', '2/17/20', '2/18/20', '2/19/20', '2/20/20', '2/21/20', '2/22/20', '2/23/20', '2/24/20', '2/25/20', '2/26/20', '2/27/20', '2/28/20', '2/29/20', '3/1/20', '3/2/20', '3/3/20', '3/4/20', '3/5/20', '3/6/20', '3/7/20', '3/8/20', '3/9/20', '3/10/20', '3/11/20']\n    }\n\n    handleSelection = (s, str) => {\n        this.pan.adding = s.length > this.state.selected.length;\n        this.pan.selection = str[Math.max(0, str.length - 1)];\n        this.setState({ selected: [...str] });\n    }\n\n    componentDidMount() {\n        d3.csv(\"./covid/covid_19_data.csv\")\n            .then((res) => {\n                this.covid_19_data = res.map((d) => {\n                    return {\n                        date: d.ObservationDate,\n                        province: d['Province/State'],\n                        country: d[\"Country/Region\"],\n                        confirmed: Number(d.Confirmed),\n                        deaths: Number(d.Deaths),\n                        recovered: Number(d.Recovered)\n                    };\n                });\n                this.covid_19_data = this.covid_19_data.map((e) => {\n                    let datakey = e.province + ', ' + e.country;\n                    datakey = this.mapping[datakey] ? this.mapping[datakey] : datakey;\n                    return {\n                        ...e,\n                        hospitalised: e.confirmed - e.deaths - e.recovered,\n                        datakey: datakey\n                    };\n                });\n\n                this.latestStats = this.covid_19_data.filter((e) => e.date === '03/11/20');\n                this.simpleStats = this.latestStats.reduce((acc, e) => {\n                    acc.confirmed += e.confirmed;\n                    acc.deaths += e.deaths;\n                    acc.recovered += e.recovered;\n                    acc.hospitalised += e.hospitalised;\n                    return acc;\n                }, {\n                    confirmed: 0,\n                    deaths: 0,\n                    recovered: 0,\n                    hospitalised: 0\n                });\n                this.setState({ covid_19_data: true });\n            });\n\n        d3.csv(\"./covid/time_series_covid_19_confirmed.csv\")\n            .then((res) => {\n                this.time_series_covid_19_confirmed = res.map((d) => this.processData(d));\n                this.setState({ time_series_covid_19_confirmed: true });\n            });\n\n        d3.csv(\"./covid/time_series_covid_19_recovered.csv\")\n            .then((res) => {\n                this.time_series_covid_19_recovered = res.map((d) => this.processData(d));\n                this.setState({ time_series_covid_19_recovered: true });\n            });\n\n        d3.csv(\"./covid/time_series_covid_19_deaths.csv\")\n            .then((res) => {\n                this.time_series_covid_19_deaths = res.map((d) => this.processData(d));\n                this.setState({ time_series_covid_19_deaths: true });\n            });\n\n    }\n\n    processData(d) {\n        const data = this.dates.reduce((acc, date) => {\n            acc.push({\n                date: date,\n                value: Number(d[date])\n            });\n            return acc;\n        }, []);\n\n        return {\n            province: d['Province/State'],\n            country: d[\"Country/Region\"],\n            lat: d.Lat,\n            long: d.Long,\n            data: data\n        };\n    }\n    render() {\n        const { covid_19_data,\n            time_series_covid_19_confirmed,\n            time_series_covid_19_recovered,\n            time_series_covid_19_deaths,\n            selected } = this.state;\n        return (\n            <Layout>\n                <Sider\n                    style={{\n                        overflow: 'auto',\n                        height: '100vh',\n                        position: 'fixed',\n                        right: 0,\n                    }}\n                >\n                    {\n                        covid_19_data &&\n                        <div className=\"text-box\">\n                            <div className=\"vis-block\">\n                                <span>Total Confirmed</span>\n                                <h1>{this.simpleStats.confirmed.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</h1>\n                            </div>\n                            <div className=\"vis-block\">\n                                <span>Total Deaths</span>\n                                <h1>{this.simpleStats.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</h1>\n                            </div>\n                            <div className=\"vis-block\">\n                                <span>Total Recovered</span>\n                                <h1>{this.simpleStats.recovered.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</h1>\n                            </div>\n                            <div className=\"vis-block\">\n                                <span>Total Active</span>\n                                <h1>{this.simpleStats.hospitalised.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</h1>\n                            </div>\n                        </div>\n                    }\n                    {\n                        covid_19_data &&\n                        <Table data={this.latestStats} handleSelection={this.handleSelection} />\n                    }\n                </Sider>\n                <Layout className=\"site-layout\" >\n                    <Header className=\"site-layout-background\" style={{ padding: 0 }} >\n                        <h1>Covid-19 DataViz</h1>\n                    </Header>\n                    <Content style={{ width: '100%', height: '100vh', overflow: 'initial' }}>\n                        <br></br>\n                        <br></br>\n                        {\n                            covid_19_data && time_series_covid_19_confirmed &&\n                            <Map data={this.latestStats} location={this.time_series_covid_19_confirmed} pan={this.pan} />\n                        }\n                        <br></br>\n                        <br></br>\n                        <br></br>\n                        <br></br>\n                        {\n                            time_series_covid_19_recovered && time_series_covid_19_confirmed && time_series_covid_19_deaths &&\n                            < StackedChart\n                                id=\"stacked-chart\"\n                                width=\"800\"\n                                height=\"400\"\n                                confirmed={this.time_series_covid_19_confirmed}\n                                recovered={this.time_series_covid_19_recovered}\n                                deaths={this.time_series_covid_19_deaths}\n                                y=\"Cummulated Cases\"\n                                selected={this.state.selected}\n                            />\n\n                        }\n                        <div>\n                            {\n                                time_series_covid_19_confirmed &&\n                                <div className=\"vis-block\">\n                                    < AreaChart id=\"confirmed-area-chart\"\n                                        width=\"270\"\n                                        height=\"400\"\n                                        data={this.time_series_covid_19_confirmed}\n                                        selected={selected}\n                                        color=\"red\"\n                                        y=\"Cummulated Confirmed Cases\"\n                                    />\n                                </div>\n                            }\n                            {\n                                time_series_covid_19_deaths &&\n                                <div className=\"vis-block\">\n                                    < AreaChart id=\"deaths-area-chart\"\n                                        width=\"270\"\n                                        height=\"400\"\n                                        data={this.time_series_covid_19_deaths}\n                                        selected={selected}\n                                        color=\"gray\"\n                                        y=\"Cummulated Death Cases\"\n                                    />\n                                </div>\n                            }\n                            {\n                                time_series_covid_19_recovered &&\n                                <div className=\"vis-block\">\n                                    < AreaChart\n                                        id=\"recovered-area-chart\"\n                                        width=\"270\"\n                                        height=\"400\"\n                                        data={this.time_series_covid_19_recovered}\n                                        selected={selected}\n                                        color=\"lightgreen\"\n                                        y=\"Cummulated Recovered Cases\"\n                                    />\n                                </div>\n                            }\n                        </div>\n                    </Content>\n                </Layout>\n            </Layout>\n        )\n    }\n}\n\nexport default Container;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Container from './components/container/container';\n\nReactDOM.render(<Container />, document.getElementById('root'));\n\n"],"sourceRoot":""}